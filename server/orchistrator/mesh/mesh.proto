syntax = "proto3";
package mesh;

option go_package = "github.com/superbrobenji/motionServer/mesh";

message MeshMessage {
  // Message type as seen/used on the wire
  // 0 = ADAPTER_DATA (normal adapter-originated data)
  // 1 = MASTER_BEACON (mesh-internal heartbeat from master)
  // 3 = SERIAL_CMD_BROADCAST (special: serverâ†’device serial command to broadcast adapter data)
  uint32 messageType = 1;

  // Adapter data type (maps to firmware enum adapter_types)
  //   -1 UNKNOWN
  //    0 PIR
  //    1 WIFI (reserved)
  //    2 LED  (reserved)
  //    3 SERIAL (serial control / health / commands)
  sint32 dataType = 2; // zigzag encoded

  // MAC addresses (6 bytes used). The server only needs to send targetMacAddress.
  // originMacAddress, lastHopMacAddress, and hopCount are automatically generated by the device.
  bytes originMacAddress = 3;   // 6 bytes (auto-generated by device)
  bytes targetMacAddress = 4;   // 6 bytes (required from server)
  bytes lastHopMacAddress = 5;  // 6 bytes (auto-generated by device)

  // 12-byte adapter payload. For SERIAL (dataType=3) this contains control opcodes.
  bytes data = 6; // up to 12 bytes used

  // Mesh hop count (0 for locally originated)
  uint32 hopCount = 7; // auto-generated by device
}
